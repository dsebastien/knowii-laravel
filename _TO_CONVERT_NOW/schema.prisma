/// -------------------------------------------------
/// WARNING
/// -------------------------------------------------
/// Whenever making changes here, make sure that everything that defines types based on the generated zod types includes or omits whatever is (not) needed
/// -------------------------------------------------

generator client {
  provider        = "prisma-client-js"
  /// Reference: https://www.prisma.io/docs/guides/database/multi-schema
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

/// Reference: https://github.com/chrishoermann/zod-prisma-types
generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../libs/common/src/lib/generated/prisma"
  useMultipleFiles                 = true
  createInputTypes                 = false
  createModelTypes                 = true
  addInputTypeValidation           = false
  addIncludeType                   = false
  addSelectType                    = false
  validateWhereUniqueInput         = false
  createOptionalDefaultValuesTypes = true
  createRelationValuesTypes        = true
  createPartialTypes               = true
  useDefaultValidators             = true
  coerceDate                       = true
  writeNullishInModelTypes         = false
}

/// Reference: https://www.prisma.io/docs/guides/database/multi-schema
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["public"]
  extensions        = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Knowii tables
////////////////////////////////////////////////////////////////////////////////////////////////////
model Customers {
  user_id            String @id @db.Uuid /// @zod.string.uuid()
  stripe_customer_id String

  @@schema("public")
  @@map("customers")
}

model Prices {
  id                String               @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  product_id        String?              @db.Uuid /// @zod.string.uuid()
  active            Boolean?
  description       String? /// @zod.string
  unit_amount       BigInt?
  currency          String?
  type              PricingType?
  interval          PricingPlanInterval?
  interval_count    Int?
  trial_period_days Int?
  metadata          Json?
  products          Products?            @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriptions     Subscriptions[]

  @@schema("public")
  @@map("prices")
}

model Products {
  id            String          @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  active        Boolean?
  name          String? /// @zod.string
  description   String? /// @zod.string
  image         String?
  metadata      Json?
  prices        Prices[]
  subscriptions Subscriptions[]

  @@schema("public")
  @@map("products")
}

model Subscriptions {
  id                   String              @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  /// Internal user id
  user_id              String              @db.Uuid @unique /// @zod.string.uuid()
  /// Supabase user id
  user_id_external     String?             @db.Uuid @unique /// @zod.string.uuid()
  status               SubscriptionStatus?
  metadata             Json?
  product_id           String?             @db.Uuid /// @zod.string.uuid()
  price_id             String?             @db.Uuid /// @zod.string.uuid()
  quantity             Int? /// @zod.number
  cancel_at_period_end Boolean?
  created_at           DateTime            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  current_period_start DateTime            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  current_period_end   DateTime            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  ended_at             DateTime?           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  cancel_at            DateTime?           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  canceled_at          DateTime?           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  trial_start          DateTime?           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  trial_end            DateTime?           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  prices               Prices?             @relation(fields: [price_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products             Products?           @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
  @@map("subscriptions")
}

enum PricingPlanInterval {
  day
  week
  month
  year

  @@schema("public")
  @@map("pricing_plan_interval")
}

enum PricingType {
  one_time
  recurring

  @@schema("public")
  @@map("pricing_type")
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  paused
  unpaid

  @@schema("public")
  @@map("subscription_status")
}

model Users {
  /// Internal user id (referenced in other tables)
  id                    String         @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  /// Same id as the id in auth.users (ie Supabase user id)
  /// Can be null because users can delete their account but we keep the entry anyway
  user_id_external      String?        @db.Uuid @unique /// @zod.string.uuid()
  /// WARNING: The Zod validation rules MUST respect the same length rules as the UI & back-end (cfr constants-more.ts)
  username              String         @unique /// @zod.string.min(3).max(36)
  email                 String         @unique /// @zod.string.email()
  user_role             KnowiiUserRole @default(USER)
  created_at            DateTime       @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())"))
  updated_at            DateTime       @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
  admin_of              Communities[]  @relation("community_admins")
  member_of             Communities[]  @relation("community_members")
  owner_of              Communities[]  @relation("community_owners")
  user_profile          UserProfiles?  @relation("user_profile_user")
  user_profile_external UserProfiles?  @relation("user_profile_external_user")

  @@index([username], map: "idx_user_username")
  @@index([email], map: "idx_user_email")
  @@schema("public")
  @@map("users")
}

model UserProfiles {
  id                String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  /// Internal user id
  user_id           String   @db.Uuid @unique /// @zod.string.uuid()
  /// Supabase user id
  user_id_external  String?  @db.Uuid @unique /// @zod.string.uuid()
  name              String   @default("") /// @zod.string
  avatar_url        String   @default("") /// @zod.string.url()
  phone             String   @default("") /// @zod.string
  website           String   @default("") /// @zod.string.url()
  twitter           String   @default("") /// @zod.string.url()
  facebook          String   @default("") /// @zod.string.url()
  instagram         String   @default("") /// @zod.string.url()
  tiktok            String   @default("") /// @zod.string.url()
  github            String   @default("") /// @zod.string.url()
  bio               String   @default("") /// @zod.string
  location          String   @default("") /// @zod.string
  organization_name String   @default("") /// @zod.string
  organization_link String   @default("") /// @zod.string.url()
  /// WARNING: When adding/updating/removing fields here, make sure to update the triggers in supabase-db-seed.sql
  created_at        DateTime @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())"))
  updated_at        DateTime @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
  user              Users?   @relation("user_profile_user", fields: [user_id], references: [id])
  user_external     Users?   @relation("user_profile_external_user", fields: [user_id_external], references: [user_id_external])

  @@index([name], map: "idx_user_profile_name")
  @@schema("public")
  @@map("user_profiles")
}

model Communities {
  id                   String                    @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  /// WARNING: The Zod validation rules MUST respect the same length rules as the UI & back-end (cfr constants-more.ts)
  name                 String                    @unique /// @zod.string.min(3).max(64)
  slug                 String                    @unique /// @zod.string.min(3).max(64).regex(/^[a-z0-9-]+$/igm)
  description          String                    @default("") /// @zod.string
  visibility           KnowiiCommunityVisibility @default(PUBLIC)
  created_at           DateTime                  @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())"))
  updated_at           DateTime                  @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
  admins               Users[]                   @relation("community_admins")
  members              Users[]                   @relation("community_members")
  owners               Users[]                   @relation("community_owners")
  resource_collections ResourceCollections[]     @relation("community_resource_collections")
  resources            Resources[]               @relation("community_resources")
  tags                 Tags[]                    @relation("community_tags")

  @@index([name], map: "idx_community_name")
  @@schema("public")
  @@map("communities")
}

model ResourceCollections {
  id           String      @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  name         String      @default("") /// @zod.string
  slug         String      @unique /// @zod.string.min(3).max(64).regex(/^[a-z0-9-]+$/igm)
  description  String      @default("") /// @zod.string
  community_id String      @db.Uuid /// @zod.string.uuid()
  created_at   DateTime    @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())"))
  updated_at   DateTime    @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
  community    Communities @relation("community_resource_collections", fields: [community_id], references: [id])
  resources    Resources[] @relation("resource_collection_resources")

  @@index([name], map: "idx_resource_collection_name")
  @@schema("public")
  @@map("resource_collections")
}

model Resources {
  id                     String              @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  name                   String              @default("") /// @zod.string
  description            String              @default("") /// @zod.string
  content                String              @default("") /// @zod.string
  source                 String              @default("") /// @zod.string.url()
  slug                   String              @unique /// @zod.string.min(3).max(64).regex(/^[a-z0-9-]+$/igm)
  up_votes               Int                 @default(0) /// @zod.number
  down_votes             Int                 @default(0) /// @zod.number
  community_id           String              @db.Uuid /// @zod.string.uuid()
  resource_collection_id String              @db.Uuid /// @zod.string.uuid()
  created_at             DateTime            @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())"))
  updated_at             DateTime            @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
  resource_collection    ResourceCollections @relation("resource_collection_resources", fields: [resource_collection_id], references: [id])
  community              Communities         @relation("community_resources", fields: [community_id], references: [id])
  tags                   Tags[]              @relation("resource_tags")

  @@index([slug], map: "idx_resource_slug")
  @@schema("public")
  @@map("resources")
}

model Tags {
  id           String       @id @db.Uuid @default(dbgenerated("gen_random_uuid()")) /// @zod.string.uuid()
  name         String       @unique /// @zod.string
  community_id String       @db.Uuid /// @zod.string.uuid()
  community    Communities? @relation("community_tags", fields: [community_id], references: [id])
  created_at   DateTime     @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())"))
  updated_at   DateTime     @db.Timestamptz(6) @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt
  resources    Resources[]  @relation("resource_tags")

  @@index([name], map: "idx_tag_name")
  @@schema("public")
  @@map("tags")
}

enum KnowiiUserRole {
  USER
  ADMIN

  @@map("user_role")
  @@schema("public")
}

enum KnowiiCommunityVisibility {
  PUBLIC
  PRIVATE

  @@map("community_visibility")
  @@schema("public")
}

/// WARNING: Whenever adding a new table, think about enabling Row Level Security at the DB level if possible (cfr supabase-db-seed.sql)
